{"version":3,"sources":["server.js"],"names":["express","require","app","config","env","PORT","cookieParser","dotenv","get","req","res","console","log","url","api","params","concat"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,IAAMF,UADNA,OAAUC,QAAQ,UAAxBE,SACMD,KAAMF,QAAZI,IAAAC,MAAA,IAIMC,aAAeL,QAAQ,iBAHvBM,QAASN,QAAQ,mBAiBvBC,IAAAM,IAAA,IAAA,SAAAC,EAAAC,GAEAC,QAAAC,IAAAH,EAAAI,IAAA,UAIAX,IAAIM,IAAI,QAAQ,SAACC,EAAIC,GAHjBF,IAAIM,EAAIL,EAAAM,OAAAD,IACJH,QAAQC,IAAIH,GAIhBE,EAAAA,KAAA,CAAYG,QAChBA,MAGIJ,IAAAA,OAASL,KAAAM,QAAAC,IAAA,iCAAAI,OAAAX,KAAA","file":"server.min.js","sourcesContent":["const express = require('express');\nconst app = express();\nconst dotenv = require('dotenv').config();\n// const cors = require('cors');\nconst PORT = process.env.PORT || 4000;\nconst cookieParser = require('cookie-parser');\nconst timeout = require('connect-timeout');\n\n// example of using this top-level; note the use of haltOnTimedout\n// after every middleware; it will stop the request flow on a timeout\n// app.use(timeout('5s'))\n// app.use(haltOnTimedout)\n// app.use(cookieParser())\n// app.use(haltOnTimedout)\n\n// Add your routes here, etc.\n\n// function haltOnTimedout (req, res, next) {\n//   if (!req.timedout) next()\n// }\n\n// app.use(cors());\napp.get('/',(req,res)=>{\n        console.log(req.url+'test')\n})\napp.get('/:api',(req,res)=>{\n    const api = req.params.api;\n    console.log(api)\n//    const msg={data : `エンドポイント${api}にリクエストが来ました。`};\n//    const data = JSON.parse(api)\n//    console.log(typeof data)\n    res.send({apiname : api})\n})\n\n\napp.listen(PORT,console.log(`Server Running on port Number ${PORT} !!`));"]}