{"version":3,"sources":["server.js"],"names":["express","require","app","env","PORT","cookieParser","timeout","req","res","next","haltOnTimedout","use","get","console","log","url","api","send","apiname"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,IAAMF,UAANE,KAAMF,QACZG,IAAAC,MAAA,IACAC,aAAAJ,QAAA,iBAGMK,QAAUL,QAAQ,mBAMxBC,SAAQG,eAARE,EAAAC,EAAAC,GACAF,EAAQG,UAAAA,IAHRR,IAAIS,IAAIL,QAAQ,OAJhBJ,IAAMI,IAAAA,gBAGNJ,IAAAS,IAAAN,gBAIAH,IAAIS,IAAID,gBAMPR,IAEDU,IAAA,IAAA,SAAAL,EAAAC,GAEQK,QAAQC,IAAIP,EAAIQ,IAAI,UAD5Bb,IAAIU,IAAI,QAAI,SAAAL,EAAAC,GACJK,IAAQC,EAAIP,EAAIQ,OAAIC,IAD5BH,QAAAC,IAAAE,GAOAR,EAAAS,KAAA,CAAAC,QAAAF,MAEcE,IAAAA,OAAOd,KAAGY,QAAAA,IAAAA,iCAAAA,OAAAA,KAAAA","file":"server.min.js","sourcesContent":["const express = require('express');\nconst app = express();\n// const dotenv = require('dotenv').config();\n// const cors = require('cors');\nconst PORT = process.env.PORT || 4000;\nconst cookieParser = require('cookie-parser')\nconst timeout = require('connect-timeout')\n\n// example of using this top-level; note the use of haltOnTimedout\n// after every middleware; it will stop the request flow on a timeout\napp.use(timeout('5s'))\napp.use(haltOnTimedout)\napp.use(cookieParser())\napp.use(haltOnTimedout)\n\n// Add your routes here, etc.\n\nfunction haltOnTimedout (req, res, next) {\n  if (!req.timedout) next()\n}\n\n// app.use(cors());\napp.get('/',(req,res)=>{\n        console.log(req.url+'test')\n})\napp.get('/:api',(req,res)=>{\n    const api = req.params.api;\n    console.log(api)\n//    const msg={data : `エンドポイント${api}にリクエストが来ました。`};\n//    const data = JSON.parse(api)\n//    console.log(typeof data)\n    res.send({apiname : api})\n})\n\n\napp.listen(PORT,console.log(`Server Running on port Number ${PORT} !!`));"]}