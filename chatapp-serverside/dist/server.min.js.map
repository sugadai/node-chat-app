{"version":3,"sources":["server.js"],"names":["express","require","app","config","env","PORT","cookieParser","dotenv","timeout","req","res","next","haltOnTimedout","use","get","timedout","api","params","log","listen","console","concat"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,IAAMF,UADNA,OAAUC,QAAQ,UAAxBE,SACMD,KAAMF,QAAZI,IAAAC,MAAA,IAIMC,aAAeL,QAAQ,iBAHvBM,QAASN,QAAQ,mBAQvBC,SAAQM,eAARC,EAAAC,EAAAC,GACAF,EAAQG,UAAAA,IADRV,IAAIW,IAAIL,QAAQ,OALhBN,IAAMI,IAAAA,gBAONJ,IAAIW,IAAIP,gBANRJ,IAAMM,IAAAA,gBAWNN,IAAAY,IAAA,IAASF,SAAAA,EAAAA,GACFH,QAAIM,IAATN,EAAmBE,IAAI,UAOzBT,IAAIY,IAAI,QAAQ,SAACL,EAAIC,GACjB,IAAMM,EAAMP,EAAIQ,OAAOD,IAJvBF,QAAJI,IAAYF,GAIRN,EAAMM,KAAMP,CAAAA,QAAWO,MAS3Bd,IAAIiB,OAAOd,KAAKe,QAAQF,IAAR,iCAAAG,OAA6ChB,KAA7C","file":"server.min.js","sourcesContent":["const express = require('express');\nconst app = express();\nconst dotenv = require('dotenv').config();\n// const cors = require('cors');\nconst PORT = process.env.PORT || 4000;\nconst cookieParser = require('cookie-parser');\nconst timeout = require('connect-timeout');\n\n// example of using this top-level; note the use of haltOnTimedout\n// after every middleware; it will stop the request flow on a timeout\napp.use(timeout('5s'))\napp.use(haltOnTimedout)\napp.use(cookieParser())\napp.use(haltOnTimedout)\n\n// Add your routes here, etc.\n\nfunction haltOnTimedout (req, res, next) {\n  if (!req.timedout) next()\n}\n\n// app.use(cors());\napp.get('/',(req,res)=>{\n        console.log(req.url+'test')\n})\napp.get('/:api',(req,res)=>{\n    const api = req.params.api;\n    console.log(api)\n//    const msg={data : `エンドポイント${api}にリクエストが来ました。`};\n//    const data = JSON.parse(api)\n//    console.log(typeof data)\n    res.send({apiname : api})\n})\n\n\napp.listen(PORT,console.log(`Server Running on port Number ${PORT} !!`));"]}