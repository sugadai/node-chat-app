{"version":3,"sources":["server.js"],"names":["express","require","app","env","PORT","bodyParser","cookieParser","process","haltOnTimedout","req","res","next","use","timeout","get","timedout","console","log","url","api","params","concat"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,IAAMF,UAANE,KAAMF,QACZG,IAAAC,MAAA,IACAC,WAAAJ,QAAA,eAGMK,aAAeL,QAAQ,iBAFvBG,QAAOG,QAAYH,mBASzBF,SAAQM,eAARC,EAAAC,EAAAC,GACAF,EAAQH,UAAYK,IARpBT,IAAMI,IAAAA,QAAY,OAMlBJ,IAAIU,IAAIP,cALRH,IAAMW,IAAAA,gBAGNX,IAAAU,IAAAN,gBAKAJ,IAAIU,IAAIJ,gBAKNN,IAAAY,IAAKL,IAAIM,SAAAA,EAAAA,GAGXC,QAAAC,IAAAR,EAAAS,IAAA,UAIAhB,IAAIY,IAAI,QAAQ,SAACL,EAAIC,GAHjBI,IAAIK,EAAIV,EAAAW,OAAAD,IACJH,QAAQC,IAAIR,GAIhBO,EAAAA,KAAA,CAAYG,QAChBA,MAGIT,IAAAA,OAASN,KAAAY,QAAAC,IAAA,0BAAAI,OAAAjB,KAAA","file":"server.min.js","sourcesContent":["const express = require('express');\nconst app = express();\n// const dotenv = require('dotenv').config();\n// const cors = require('cors');\nconst PORT = process.env.PORT || 4000;\nconst bodyParser = require('body-parser')\nconst cookieParser = require('cookie-parser')\nconst timeout = require('connect-timeout')\n\n// example of using this top-level; note the use of haltOnTimedout\n// after every middleware; it will stop the request flow on a timeout\napp.use(timeout('5s'))\napp.use(bodyParser())\napp.use(haltOnTimedout)\napp.use(cookieParser())\napp.use(haltOnTimedout)\n\n// Add your routes here, etc.\n\nfunction haltOnTimedout (req, res, next) {\n  if (!req.timedout) next()\n}\n\n// app.use(cors());\napp.get('/',(req,res)=>{\n        console.log(req.url+'test')\n})\napp.get('/:api',(req,res)=>{\n    const api = req.params.api;\n    console.log(api)\n//    const msg={data : `エンドポイント${api}にリクエストが来ました。`};\n//    const data = JSON.parse(api)\n//    console.log(typeof data)\n    res.send({apiname : api})\n})\n\n\napp.listen(PORT,console.log(`Server Running on port ${PORT} !!`));"]}