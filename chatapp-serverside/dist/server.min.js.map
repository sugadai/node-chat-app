{"version":3,"sources":["server.js"],"names":["express","require","app","config","cors","env","PORT","use","get","req","res","log","url","console","api","params","send","apiname","listen","concat"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,IAAMF,UADNA,OAAUC,QAAQ,UAAxBE,SAGMC,KAAOH,QAAQ,QAFfC,KAAMF,QAAZK,IAAAC,MAAA,IAiBAJ,IAAAK,IAAAH,QAGAF,IAAIM,IAAI,IAAI,SAACC,EAAIC,GADTN,QAARO,IAAAF,EAAAG,IAAA,UAEQC,IAAAA,IAAAA,QAAYJ,SAAGA,EAAHC,GADpB,IAAAI,EAAAL,EAAAM,OAAAD,IAGIN,QAAIG,IAARG,GAKAJ,EAAAM,KAAA,CAAAC,QAAAH,MACaZ,IAATgB,OAAAZ,KAAAO,QAAAF,IAAA,iCAAAQ,OAAAb,KAAA","file":"server.min.js","sourcesContent":["const express = require('express');\nconst app = express();\nconst dotenv = require('dotenv').config();\nconst cors = require('cors');\nconst PORT = process.env.PORT || 4000;\n// const cookieParser = require('cookie-parser');\n// const timeout = require('connect-timeout');\n\n// example of using this top-level; note the use of haltOnTimedout\n// after every middleware; it will stop the request flow on a timeout\n// app.use(timeout('5s'))\n// app.use(haltOnTimedout)\n// app.use(cookieParser())\n\n// Add your routes here, etc.\n\n// function haltOnTimedout (req, res, next) {\n//   if (!req.timedout) next()\n// }\n\napp.use(cors());\napp.get('/',(req,res)=>{\n        console.log(req.url+'test')\n})\napp.get('/:api',(req,res)=>{\n    const api = req.params.api;\n    console.log(api)\n//    const msg={data : `エンドポイント${api}にリクエストが来ました。`};\n//    const data = JSON.parse(api)\n//    console.log(typeof data)\n    res.send({apiname : api})\n})\n\n\napp.listen(PORT,console.log(`Server Running on port Number ${PORT} !!`));"]}