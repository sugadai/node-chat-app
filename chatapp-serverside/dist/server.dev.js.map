{"version":3,"sources":["server.js"],"names":["express","require","app","dotenv","config","PORT","process","env","get","req","res","console","log","url","api","params","send","apiname","listen"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,GAAG,GAAGF,OAAO,EAAnB;;AACA,IAAMG,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAP,CAAkBG,MAAlB,EAAf,C,CACA;;;AACA,IAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC,C,CACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;;AACAH,GAAG,CAACM,GAAJ,CAAQ,GAAR,EAAY,UAACC,GAAD,EAAKC,GAAL,EAAW;AACfC,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,GAAJ,GAAQ,MAApB;AACP,CAFD;AAGAX,GAAG,CAACM,GAAJ,CAAQ,OAAR,EAAgB,UAACC,GAAD,EAAKC,GAAL,EAAW;AACvB,MAAMI,GAAG,GAAGL,GAAG,CAACM,MAAJ,CAAWD,GAAvB;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ,EAFuB,CAG3B;AACA;AACA;;AACIJ,EAAAA,GAAG,CAACM,IAAJ,CAAS;AAACC,IAAAA,OAAO,EAAGH;AAAX,GAAT;AACH,CAPD;AAUAZ,GAAG,CAACgB,MAAJ,CAAWb,IAAX,EAAgBM,OAAO,CAACC,GAAR,kCAAsCP,IAAtC,SAAhB","sourcesContent":["const express = require('express');\nconst app = express();\nconst dotenv = require('dotenv').config();\n// const cors = require('cors');\nconst PORT = process.env.PORT || 4000;\n// const cookieParser = require('cookie-parser');\n// const timeout = require('connect-timeout');\n\n// example of using this top-level; note the use of haltOnTimedout\n// after every middleware; it will stop the request flow on a timeout\n// app.use(timeout('5s'))\n// app.use(haltOnTimedout)\n// app.use(cookieParser())\n\n// Add your routes here, etc.\n\n// function haltOnTimedout (req, res, next) {\n//   if (!req.timedout) next()\n// }\n\n// app.use(cors());\napp.get('/',(req,res)=>{\n        console.log(req.url+'test')\n})\napp.get('/:api',(req,res)=>{\n    const api = req.params.api;\n    console.log(api)\n//    const msg={data : `エンドポイント${api}にリクエストが来ました。`};\n//    const data = JSON.parse(api)\n//    console.log(typeof data)\n    res.send({apiname : api})\n})\n\n\napp.listen(PORT,console.log(`Server Running on port ${PORT} !!`));"],"file":"server.dev.js"}