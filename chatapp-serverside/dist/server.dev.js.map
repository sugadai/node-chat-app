{"version":3,"sources":["server.js"],"names":["express","require","app","PORT","process","env","bodyParser","cookieParser","timeout","use","haltOnTimedout","req","res","next","timedout","get","console","log","url","api","params","send","apiname","listen"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,GAAG,GAAGF,OAAO,EAAnB,C,CACA;AACA;;AACA,IAAMG,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC;;AACA,IAAMG,UAAU,GAAGL,OAAO,CAAC,aAAD,CAA1B;;AACA,IAAMM,YAAY,GAAGN,OAAO,CAAC,eAAD,CAA5B;;AACA,IAAMO,OAAO,GAAGP,OAAO,CAAC,iBAAD,CAAvB,C,CAEA;AACA;;;AACAC,GAAG,CAACO,GAAJ,CAAQD,OAAO,CAAC,IAAD,CAAf;AACAN,GAAG,CAACO,GAAJ,CAAQH,UAAU,EAAlB;AACAJ,GAAG,CAACO,GAAJ,CAAQC,cAAR;AACAR,GAAG,CAACO,GAAJ,CAAQF,YAAY,EAApB;AACAL,GAAG,CAACO,GAAJ,CAAQC,cAAR,E,CAEA;;AAEA,SAASA,cAAT,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACvC,MAAI,CAACF,GAAG,CAACG,QAAT,EAAmBD,IAAI;AACxB,C,CAED;;;AACAX,GAAG,CAACa,GAAJ,CAAQ,GAAR,EAAY,UAACJ,GAAD,EAAKC,GAAL,EAAW;AACfI,EAAAA,OAAO,CAACC,GAAR,CAAYN,GAAG,CAACO,GAAJ,GAAQ,MAApB;AACP,CAFD;AAGAhB,GAAG,CAACa,GAAJ,CAAQ,OAAR,EAAgB,UAACJ,GAAD,EAAKC,GAAL,EAAW;AACvB,MAAMO,GAAG,GAAGR,GAAG,CAACS,MAAJ,CAAWD,GAAvB;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ,EAFuB,CAG3B;AACA;AACA;;AACIP,EAAAA,GAAG,CAACS,IAAJ,CAAS;AAACC,IAAAA,OAAO,EAAGH;AAAX,GAAT;AACH,CAPD;AAUAjB,GAAG,CAACqB,MAAJ,CAAWpB,IAAX,EAAgBa,OAAO,CAACC,GAAR,kCAAsCd,IAAtC,SAAhB","sourcesContent":["const express = require('express');\nconst app = express();\n// const dotenv = require('dotenv').config();\n// const cors = require('cors');\nconst PORT = process.env.PORT || 4000;\nconst bodyParser = require('body-parser')\nconst cookieParser = require('cookie-parser')\nconst timeout = require('connect-timeout')\n\n// example of using this top-level; note the use of haltOnTimedout\n// after every middleware; it will stop the request flow on a timeout\napp.use(timeout('5s'))\napp.use(bodyParser())\napp.use(haltOnTimedout)\napp.use(cookieParser())\napp.use(haltOnTimedout)\n\n// Add your routes here, etc.\n\nfunction haltOnTimedout (req, res, next) {\n  if (!req.timedout) next()\n}\n\n// app.use(cors());\napp.get('/',(req,res)=>{\n        console.log(req.url+'test')\n})\napp.get('/:api',(req,res)=>{\n    const api = req.params.api;\n    console.log(api)\n//    const msg={data : `エンドポイント${api}にリクエストが来ました。`};\n//    const data = JSON.parse(api)\n//    console.log(typeof data)\n    res.send({apiname : api})\n})\n\n\napp.listen(PORT,console.log(`Server Running on port ${PORT} !!`));"],"file":"server.dev.js"}